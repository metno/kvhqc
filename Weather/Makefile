include ../etc/make.$(OSTYPE)

PROGRAM_NAME=Weather
TARGET= lib$(PROGRAM_NAME).a
TEST_PROGRAM_NAME= test$(PROGRAM_NAME)

MAIN:=
SRC:=
TESTSRC:=
QSRC:=
UI:=

OMNIORB_HOME=/usr
OMNI_INCLUDE= $(OMNIORB_HOME)/include 
OMNI_LIB= $(OMNIORB_HOME)/lib 

BOOST_HOME=/usr
BOOST_INCLUDE= $(BOOST_HOME)/include
BOOST_LIB= $(BOOST_HOME)/lib

PUTOOLS=$(HQC)/..
PKG_CONF_LIBS= QtCore QtGui Qt3Support libxml++-2.6

INCLUDE:=-Isrc/ -I../include \
	 -I../authentication \
	 $(BOOST_INCLUDE) \
	 $(OMNI_INCLUDE) \
	 -I$(QTINC)/Qt3Support \
	 -I$(QTINC)/Qt \
	 -I$(QTINC)/QtCore \
	 -I$(QTINC)/QtGui \
	`pkg-config --cflags kvcpp putools` \
	 -I../include/ \
	 `pkg-config --cflags $(PKG_CONF_LIBS)`

LIB:= -L../authentication/ -lauthentication \
	-L$(BOOST_LIB) -lboost_thread \
	`pkg-config --libs kvcpp qutilities qtimeseries gltext putools tsdata pets2` \
	-L$(OMNI_LIB) -lomniORB4 -lomnithread \
	-L$(QTLIBDIR) -lQt3Support -lQtCore -lQtGui -lQtOpenGL $(QT_LIBS) $(XLIBDIR) -lXmu -lXext -lXt -lXrender -lSM -lICE -lX11 -lXxf86vm -lm `pkg-config --libs libxml++-2.6`

CXXFLAGS+= -Wall -DQT3_SUPPORT
DEFINES+=
CXXLDFLAGS+=


include src/make.mk
#include test/make.mk


# Qt:
UI_IMPL= $(UI:.ui=.cc)
UI_HEAD= $(UI:.ui=.h)
MOC_SRC= $(QSRC:.cc=.moc.cc) $(UI_IMPL:.cc=.moc.cc)

ALL_SRC= $(UI_IMPL) $(QSRC) $(MOC_SRC) $(SRC)
OBJ=  $(ALL_SRC:.cc=.o)

# Test:
TESTOBJ= $(TESTSRC:.cc=.o)
TESTLIB= -lcppunit

ifndef PREFIX
       PREFIX=$(HQC)/apps/
endif

all:  $(TARGET)

install: $(TARGET)
	mkdir -p $(PREFIX)/include/$(PROGRAM_NAME) $(PREFIX)/lib $(PREFIX)/lib/pkgconfig/
	cp $(TARGET) $(PREFIX)/lib
	cp -r src/*.h src/bits $(PREFIX)/include/$(PROGRAM_NAME)
	rm -f $(PREFIX)/lib/pkgconfig/$(PROGRAM_NAME).pc; cat $(PROGRAM_NAME).pc | sed s,PREFIX,$(PREFIX), >> $(PREFIX)/lib/pkgconfig/$(PROGRAM_NAME).pc

uninstall:
	rm -rf $(PREFIX)/$(TARGET) $(PREFIX)/include/$(PROGRAM_NAME) $(PREFIX)/lib/pkgconfig/$(PROGRAM_NAME).pc


.cc.o:
	$(CXX) $(CXXFLAGS) $(DEFINES) $(INCLUDE) -o $@ -c $<


# Qt specific:
%.moc.cc:	%.h
	moc-qt4 -o $@ $<

%.h: %.ui
	uic -o$@ $<

%.ui.h:
	touch $@

%.cc: %.ui %.h %.ui.h
	uic -o$@ -impl $(notdir $*.h) $<


$(PROGRAM_NAME): $(OBJ) $(MAIN:.cc=.o)
	$(CXX) -o $@ -Wall $(CXXLDFLAGS) $(OBJ) $(MAIN:.cc=.o) $(LIB)


$(TARGET): $(OBJ)
	ar r lib$(PROGRAM_NAME).a $(OBJ)


$(TEST_PROGRAM_NAME): $(OBJ) $(TESTOBJ)
	$(CXX) -o $@ -Wall $(CXXLDFLAGS) $(OBJ) $(TESTOBJ) $(LIB) $(TESTLIB)

$(LIB_NAME): $(OBJ)


test:  $(TEST_PROGRAM_NAME)
	@echo Running tests:; ./$(TEST_PROGRAM_NAME)


# Autogenerated dependencies:
%.d: %.cc $(UI_HEAD)
	@set -e; rm -f $@; \
	$(CXX) -MM -MQ $(basename $<).o $(CXXFLAGS) $(DEFINES) $(INCLUDE) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

DEPENDS_FILES= $(SRC:.cc=.d) $(MAIN:.cc=.d) $(QSRC:.cc=.d) $(UI_IMPL:.cc=.d) $(TESTSRC:.cc=.d) $(TESTMAIN:.cc=.d)

-include $(DEPENDS_FILES)

# Not allow qt tools to delete generated headers
#KEEP_UI_HEADERS:        $(UI_HEAD)


pretty:
	rm -f core core.*
	find . -name '*~' -type f -exec rm -f  {} \;
	find . -name '*.d.*' -type f -exec rm -f  {} \;

clean: pretty
	rm -f $(OBJ) $(MAIN:.cc=.o) $(TESTOBJ) $(UI_HEAD) $(UI_IMPL) $(MOC_SRC) $(DEPENDS_FILES)

veryclean: clean
	rm -f $(TARGET) $(TEST_PROGRAM_NAME)

.PHONY: all pretty clean test KEEP_UI_HEADERS
